<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng"
        schematypens="http://relaxng.org/ns/structure/1.0"?>

<sect1 role="taskdef" xml:id="ImportTask" xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>ImportTask</title>
    <para>Imports another build file into the current project.</para>
    <para>On execution it will read another Phing file into the same Project. Functionally it is nearly the same as copy
        and pasting the imported file onto the end of the importing file.
    </para>
    <para>The import task may only be used as a top-level task. This means that it may not be used in a target.</para>
    <table>
        <title>Attributes</title>
        <tgroup cols="5">
            <colspec colname="name" colnum="1" colwidth="1.5*"/>
            <colspec colname="type" colnum="2" colwidth="0.8*"/>
            <colspec colname="description" colnum="3" colwidth="3.5*"/>
            <colspec colname="default" colnum="4" colwidth="0.8*"/>
            <colspec colname="required" colnum="5" colwidth="1.2*"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Type</entry>
                    <entry>Description</entry>
                    <entry>Default</entry>
                    <entry>Required</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>
                        <literal>file</literal>
                    </entry>
                    <entry>
                        <literal role="type">String</literal>
                    </entry>
                    <entry>The file to import.</entry>
                    <entry>n/a</entry>
                    <entry>Yes</entry>
                </row>
                <row>
                    <entry>
                        <literal>optional</literal>
                    </entry>
                    <entry>
                        <literal role="type">Boolean</literal>
                    </entry>
                    <entry>If true, do not stop the build if the file does not exist.</entry>
                    <entry>
                        <literal>false</literal>
                    </entry>
                    <entry>No</entry>
                </row>
            </tbody>
        </tgroup>
    </table>
    <sect2 xml:id="ImportTask-target-overriding">
        <title>Target Overriding</title>
        <para>If a target in the main file is also present in at least one of the imported files, the one from the main
            file takes precedence.
        </para>
        <para>So if I import for example a <literal>docs/build.xml</literal> file named <filename>builddocs</filename>,
            that contains a "<literal>docs</literal>" target, I can redefine it in my main buildfile and that is the one
            that will be called. This makes it easy to keep the same target name, so that the overriding target is still
            called by any other targets--in either the main or imported buildfile(s)--for which it is a dependency, with
            a different implementation. The target from <literal>docs/build.xml</literal> is made available by the name
            "<literal>builddocs.docs</literal>". This enables the new implementation to call the old target, thus
            enhancing it with tasks called before or after it.
        </para>
    </sect2>
    <sect2>
        <title>Special Properties</title>
        <para>Imported files are treated as they are present in the main buildfile. This makes it easy to understand,
            but it makes it impossible for them to reference files and resources relative to their path. Because of
            this, for every imported file, Phing adds a property that contains the path to the imported buildfile. With
            this path, the imported buildfile can keep resources and be able to reference them relative to its position.
        </para>
        <para>So if I import for example a <literal>docs/build.xml</literal> file named <filename>builddocs</filename>,
            I can get its path as <literal>phing.file.builddocs</literal>, similarly to the <literal>phing.file</literal>
            property of the main buildfile. Additionally, the directory will be stored in
            <literal>phing.dir.builddocs</literal>.
        </para>
        <para>Note that "builddocs" is not the filename, but the name attribute present in the imported project tag.
        </para>
        <para>If import file does not have a name attribute, the <literal>phing.file.projectname</literal> and
            <literal>phing.dir.projectname</literal> properties will not be set.
        </para>
    </sect2>
    <sect2>
        <title>Resolving Files Against the Imported File</title>
        <para>Suppose your main build file called <literal>importing.xml</literal> imports a build file
            <filename>imported.xml</filename> , located anywhere on the file system, and <literal>imported.xml</literal>
            reads a set of properties from <literal>imported.properties</literal>:
        </para>
        <programlisting language="xml">&lt;!-- importing.xml --&gt;
&lt;project name="importing" basedir="." default="..."&gt;
&lt;import file="${path_to_imported}/imported.xml"/&gt;
&lt;/project&gt;

&lt;!-- imported.xml --&gt;
&lt;project name="imported" basedir="." default="..."&gt;
&lt;property file="imported.properties"/&gt;
&lt;/project&gt;
        </programlisting>
        <para>This snippet however will resolve <literal>imported.properties</literal> against the basedir of
            <literal>importing.xml</literal> , because the basedir of <literal>imported.xml</literal>is ignored by Phing.
            The right way to use <literal>imported.properties</literal> is:
        </para>
        <programlisting language="xml">&lt;!-- imported.xml --&gt;
&lt;project name="imported" basedir="." default="..."&gt;
&lt;dirname property="imported.basedir" file="${phing.file.imported}"/&gt;
&lt;property file="${imported.basedir}/imported.properties"/&gt;
&lt;/project&gt;
        </programlisting>
        <para>or even shorter:</para>
        <programlisting language="xml">&lt;!-- imported.xml --&gt;
&lt;project name="imported" basedir="." default="..."&gt;
&lt;property file="${phing.dir.imported}/imported.properties"/&gt;
&lt;/project&gt;
        </programlisting>
        <para>As explained above <literal>${phing.file.imported}</literal> stores the full path of the build script,
            that defines the project called <emphasis>imported</emphasis>, (in short it stores the path to
            <literal>imported.xml</literal>) and <literal>${phing.dir.imported}</literal> stores its directory. This
            technique also allows <literal>imported.xml</literal> to be used as a standalone file (without being imported
            in other project).
        </para>

    </sect2>

    <sect2>
        <title>Examples</title>
        <programlisting language="xml">&lt;import file="path/to/build.xml"/&gt;
&lt;import file="path/to/build.xml" optional="true"/&gt;
        </programlisting>
        <para>Additionally, <literal>ImportTask</literal> supports Filesets, i.e. you can easily include/exclude one or
            more files. For more information, see<xref xlink:href="#app.coretypes"/>.
        </para>
        <programlisting language="xml">&lt;import"&gt;
    &lt;fileset dir="."&gt;
        &lt;include name="path/to/build.xml" /&gt;
    &lt;/fileset&gt;
    &lt;filelist dir="." files="path/to/build.xml"/&gt;
&lt;/import&gt;
        </programlisting>
    </sect2>
</sect1>
